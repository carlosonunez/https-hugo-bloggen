version: "2.4"
services:
  terraform-base:
    image: hashicorp/terraform
    volumes:
      - "${PWD}/infrastructure/${INFRASTRUCTURE_PROVIDER?Please provide an infrastructure provider.}:/work"
    working_dir: /work
    env_file: ${ENVIRONMENT_FILE:-.env}
    environment:
      - ENVIRONMENT=${ENVIRONMENT?Please provide an environment name.}

  hugo-base:
    build:
      context: .
      args:
        - HUGO_VERSION

  unit_tests:
    image: graze/bats
    env_file: ${ENVIRONMENT_FILE:-.env}.test
    depends_on:
      - hugo-generate-test-configs
      - hugo-tests
    links:
      - hugo-tests:hugo
    volumes:
      - "${PWD}/tests/unit:/tests"
    command: /tests

  integration_tests:
    image: graze/bats
    env_file: ${ENVIRONMENT_FILE:-.env}
    depends_on:
      - hugo-generate-configs
    volumes:
      - "${PWD}/tests/integration:/tests"
    command: /tests

  terraform-generate-tfvars:
    image: hairyhenderson/gomplate
    volumes:
      - "$PWD/${ENVIRONMENT_FILE:-.env}:/${ENVIRONMENT_FILE:-.env}"
    env_file: ${ENVIRONMENT_FILE:-.env}
    environment:
      - GOMPLATE_SUPPRESS_EMPTY=true
    command:
      - "--file"
      - terraform.tfvars.tmpl
      - "--out"
      - terraform.tfvars

  terraform-generate-backend-vars:
    extends: terraform-base
    image: hairyhenderson/gomplate
    env_file: ${ENVIRONMENT_FILE:-.env}
    volumes:
      - "$PWD/${ENVIRONMENT_FILE:-.env}:/${ENVIRONMENT_FILE:-.env}"
    environment:
      - GOMPLATE_SUPPRESS_EMPTY=true
    command:
      - "--file"
      - backend.tfvars.tmpl
      - "--out"
      - backend.tfvars


  terraform-validate:
    extends: terraform-base
    env_file: ${ENVIRONMENT_FILE:-.env}
    depends_on:
      - terraform-generate-tfvars
    command: validate

  terraform-init:
    extends: terraform-base
    env_file: ${ENVIRONMENT_FILE:-.env}
    depends_on:
      - terraform-generate-backend-vars
    command:
      - init
      - "-input=false"
      - "-backend=true"
      - "-backend-config=/work/backend.tfvars"

  terraform-get:
    extends: terraform-base
    env_file: ${ENVIRONMENT_FILE:-.env}
    depends_on:
      - terraform-generate-tfvars
    command: get

  terraform-plan:
    extends: terraform-base
    env_file: ${ENVIRONMENT_FILE:-.env}
    depends_on:
      - terraform-generate-tfvars
    command:
      - plan
      - "-input=false"

  terraform-apply:
    extends: terraform-base
    env_file: ${ENVIRONMENT_FILE:-.env}
    depends_on:
      - terraform-generate-tfvars
    command:
      - apply
      - "-input=false"
      - "-auto-approve"

  terraform-destroy:
    extends: terraform-base
    env_file: ${ENVIRONMENT_FILE:-.env}
    depends_on:
      - terraform-generate-tfvars
    command:
      - destroy
      - "-auto-approve"
      - "-input=false"

  terraform-output:
    extends: terraform-base
    env_file: ${ENVIRONMENT_FILE:-.env}
    environment:
      - VARIABLE_TO_GET
    depends_on:
      - terraform-generate-tfvars
    command:
      - output
      - "$VARIABLE_TO_GET"

  hugo-generate-configs:
    image: hairyhenderson/gomplate
    env_file: ${ENVIRONMENT_FILE:-.env}
    volumes:
      - "${PWD}:/work"
    working_dir: /work
    command:
      - "--file"
      - config.toml.tmpl
      - "--out"
      - config.toml

  hugo-generate-test-configs:
    extends: hugo-generate-configs
    env_file: ${ENVIRONMENT_FILE:-.env}.test

  hugo:
    extends: hugo-base
    env_file: ${ENVIRONMENT_FILE:-.env}
    tty: true
    volumes:
      - "${PWD}/site:/site"
      - "${PWD}/layouts/:/site/layouts"
      - "${PWD}/themes/:/site/themes"
      - "${PWD}/static/:/site/static"
      - "${PWD}/posts/:/site/content/post"
      - "${PWD}/config.toml:/site/config.toml"
    working_dir: /site
    ports:
      - 8080:8080
    command:
      - server
      - --baseURL
      - "${HUGO_BASE_URL}"
      - --bind
      - "0.0.0.0"
      - -p
      - "8080"

  hugo-generate:
    extends: hugo
    env_file: ${ENVIRONMENT_FILE:-.env}
    command: []

  hugo-tests:
    extends: hugo
    env_file: ${ENVIRONMENT_FILE:-.env}.test
    volumes:
      - "${PWD}/tests/fixtures/test_posts/:/site/content/post"

  hugo-deploy:
    env_file: ${ENVIRONMENT_FILE:-.env}
    environment:
      - BUCKET_TO_DEPLOY_TO
    volumes:
      - "${PWD}:/work"
    image: "${AWSCLI_DOCKER_IMAGE:-anigeo/awscli}"
    command:
      - s3
      - cp
      - "--recursive"
      - "/work/site/"
      - "s3://${BUCKET_TO_DEPLOY_TO}/"
